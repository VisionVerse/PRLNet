
# -*- coding: utf-8 -*-


import torch
import torch.nn as nn
import torch.utils.checkpoint as checkpoint
from timm.models.layers import DropPath, to_2tuple, trunc_normal_
import numpy as np
import torch.nn.functional as F


def conv3x3(in_planes, out_planes, stride=1, has_bias=False):
    return nn.Conv2d(
        in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=has_bias
    )


def conv3x3_bn_relu(in_planes, out_planes, stride=1):
    return nn.Sequential(
        conv3x3(in_planes, out_planes, stride),
        nn.BatchNorm2d(out_planes),
        nn.ReLU(inplace=True),
    )


class Mlp(nn.Module):
    def __init__(
        self,
        in_features,
        hidden_features=None,
        out_features=None,
        act_layer=nn.GELU,
        drop=0.0,
    ):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


def window_partition(x, window_size):
    """
    Args:
        x: (B, H, W, C)
        window_size (int): window size

    Returns:
        windows: (num_windows*B, window_size, window_size, C) 堆叠到一起形成一个长条
    """
    B, H, W, C = x.shape
    x = x.view(B, H // window_size, window_size, W // window_size, window_size, C)
    windows = (
        x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, C)
    )
    return windows


def window_reverse(windows, window_size, H, W):
    """
    Args:
        windows: (num_windows*B, window_size, window_size, C)
        window_size (int): Window size
        H (int): Height of image
        W (int): Width of image

    Returns:
        x: (B, H, W, C)
    """
    B = int(windows.shape[0] / (H * W / window_size / window_size))
    x = windows.view(
        B, H // window_size, W // window_size, window_size, window_size, -1
    )
    x = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)
    return x


class WindowAttention(nn.Module):
    r"""Window based multi-head self attention (W-MSA) module with relative position bias.
    It supports both of shifted and non-shifted window.

    Args:
        dim (int): Number of input channels.
        window_size (tuple[int]): The height and width of the window.
        num_heads (int): Number of attention heads.
        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set
        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0
        proj_drop (float, optional): Dropout ratio of output. Default: 0.0
    """

    def __init__(
        self,
        dim,
        window_size,
        num_heads,
        qkv_bias=True,
        qk_scale=None,
        attn_drop=0.0,
        proj_drop=0.0,
    ):

        super().__init__()
        self.dim = dim
        self.window_size = window_size  # Wh, Ww
        self.num_heads = num_heads
        head_dim = dim // num_heads  # 每一个头的通道维数
        self.scale = qk_scale or head_dim**-0.5

        # define a parameter table of relative position bias
        self.relative_position_bias_table = nn.Parameter(
            torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)
        )  # 2*Wh-1 * 2*Ww-1, nH

        # get pair-wise relative position index for each token inside the window
        coords_h = torch.arange(self.window_size[0])
        coords_w = torch.arange(self.window_size[1])

        coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
        coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
        relative_coords = (
            coords_flatten[:, :, None] - coords_flatten[:, None, :]
        )  # 2, Wh*Ww, Wh*Ww
        relative_coords = relative_coords.permute(
            1, 2, 0
        ).contiguous()  # Wh*Ww, Wh*Ww, 2
        relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
        relative_coords[:, :, 1] += self.window_size[1] - 1
        relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
        relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
        self.register_buffer("relative_position_index", relative_position_index)

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        trunc_normal_(self.relative_position_bias_table, std=0.02)
        self.softmax = nn.Softmax(dim=-1)

    def forward(self, x, mask=None):
        """
        Args:
            x: input features with shape of (num_windows*B, N, C)
            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None
        """
        B_, N, C = x.shape
        qkv = (
            self.qkv(x)
            .reshape(B_, N, 3, self.num_heads, C // self.num_heads)
            .permute(2, 0, 3, 1, 4)
        )
        q, k, v = (
            qkv[0],
            qkv[1],
            qkv[2],
        )  # make torchscript happy (cannot use tensor as tuple)

        q = q * self.scale
        attn = q @ k.transpose(-2, -1)

        relative_position_bias = self.relative_position_bias_table[
            self.relative_position_index.view(-1)
        ].view(
            self.window_size[0] * self.window_size[1],
            self.window_size[0] * self.window_size[1],
            -1,
        )  # Wh*Ww,Wh*Ww,nH
        relative_position_bias = relative_position_bias.permute(
            2, 0, 1
        ).contiguous()  # nH, Wh*Ww, Wh*Ww
        attn = attn + relative_position_bias.unsqueeze(0)

        if mask is not None:
            nW = mask.shape[0]
            attn = attn.view(B_ // nW, nW, self.num_heads, N, N) + mask.unsqueeze(
                1
            ).unsqueeze(0)
            attn = attn.view(-1, self.num_heads, N, N)
            attn = self.softmax(attn)
        else:
            attn = self.softmax(attn)

        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B_, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x

    def extra_repr(self) -> str:
        return f"dim={self.dim}, window_size={self.window_size}, num_heads={self.num_heads}"

    def flops(self, N):
        # calculate flops for 1 window with token length of N
        flops = 0
        # qkv = self.qkv(x)
        flops += N * self.dim * 3 * self.dim
        # attn = (q @ k.transpose(-2, -1))
        flops += self.num_heads * N * (self.dim // self.num_heads) * N
        #  x = (attn @ v)
        flops += self.num_heads * N * N * (self.dim // self.num_heads)
        # x = self.proj(x)
        flops += N * self.dim * self.dim
        return flops


class SwinTransformerBlock(nn.Module):
    r"""Swin Transformer Block.

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resulotion.
        num_heads (int): Number of attention heads.
        window_size (int): Window size.
        shift_size (int): Shift size for SW-MSA.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float, optional): Stochastic depth rate. Default: 0.0
        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(
        self,
        dim,
        input_resolution,
        num_heads,
        window_size=7,
        shift_size=0,
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop=0.0,
        attn_drop=0.0,
        drop_path=0.0,
        act_layer=nn.GELU,
        norm_layer=nn.LayerNorm,
    ):
        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.num_heads = num_heads
        self.window_size = window_size
        self.shift_size = shift_size
        self.mlp_ratio = mlp_ratio
        if min(self.input_resolution) <= self.window_size:
            # if window size is larger than input resolution, we don't partition windows
            self.shift_size = 0
            self.window_size = min(self.input_resolution)
        assert (
            0 <= self.shift_size < self.window_size
        ), "shift_size must in 0-window_size"

        self.norm1 = norm_layer(dim)
        self.attn = WindowAttention(
            dim,
            window_size=to_2tuple(self.window_size),
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            attn_drop=attn_drop,
            proj_drop=drop,
        )

        self.drop_path = DropPath(drop_path) if drop_path > 0.0 else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(
            in_features=dim,
            hidden_features=mlp_hidden_dim,
            act_layer=act_layer,
            drop=drop,
        )

        if self.shift_size > 0:
            # calculate attention mask for SW-MSA
            H, W = self.input_resolution
            img_mask = torch.zeros((1, H, W, 1))  # 1 H W 1---Important！！！
            h_slices = (
                slice(0, -self.window_size),
                slice(-self.window_size, -self.shift_size),
                slice(-self.shift_size, None),
            )
            w_slices = (
                slice(0, -self.window_size),
                slice(-self.window_size, -self.shift_size),
                slice(-self.shift_size, None),
            )
            cnt = 0
            for h in h_slices:
                for w in w_slices:
                    img_mask[:, h, w, :] = cnt
                    cnt += 1

            mask_windows = window_partition(
                img_mask, self.window_size
            )  # nW, window_size, window_size, 1
            mask_windows = mask_windows.view(-1, self.window_size * self.window_size)
            attn_mask = mask_windows.unsqueeze(1) - mask_windows.unsqueeze(2)
            attn_mask = attn_mask.masked_fill(
                attn_mask != 0, float(-100.0)
            ).masked_fill(attn_mask == 0, float(0.0))
        else:
            attn_mask = None

        self.register_buffer("attn_mask", attn_mask)

    def forward(self, x):
        """
        SwinTransformerBlock(STB)模块
        :param x: 输入此的x是整图. [B, L, C], L=H*W, torch.Size([1, 9216, 128])
        :return: torch.Size([1, 9216, 128])
        """
        H, W = self.input_resolution
        B, L, C = x.shape
        assert L == H * W, "input feature has wrong size"

        shortcut = x
        x = self.norm1(x)
        x = x.view(B, H, W, C)

        # cyclic shift
        if self.shift_size > 0:

            shifted_x = torch.roll(
                x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2)
            )
        else:
            shifted_x = x

        # partition windows
        x_windows = window_partition(
            shifted_x, self.window_size
        )  # nW*B, window_size, window_size, C
        x_windows = x_windows.view(
            -1, self.window_size * self.window_size, C
        )  # nW*B, window_size*window_size, C

        # W-MSA/SW-MSA
        attn_windows = self.attn(
            x_windows, mask=self.attn_mask
        )  # nW*B, window_size*window_size, C

        # merge windows
        attn_windows = attn_windows.view(-1, self.window_size, self.window_size, C)
        shifted_x = window_reverse(attn_windows, self.window_size, H, W)  # B H' W' C

        # reverse cyclic shift
        if self.shift_size > 0:
            x = torch.roll(
                shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2)
            )
        else:
            x = shifted_x
        x = x.view(B, H * W, C)

        # FFN
        x = shortcut + self.drop_path(x)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        # print('FFN', x.shape)  # [1, 9216, 128]
        return x

    def extra_repr(self) -> str:
        return (
            f"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, "
            f"window_size={self.window_size}, shift_size={self.shift_size}, mlp_ratio={self.mlp_ratio}"
        )


class PatchMerging(nn.Module):
    r"""Patch Merging Layer.

    Args:
        input_resolution (tuple[int]): Resolution of input feature.
        dim (int): Number of input channels.
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(self, input_resolution, dim, norm_layer=nn.LayerNorm):
        super().__init__()
        self.input_resolution = input_resolution
        self.dim = dim
        self.reduction = nn.Linear(4 * dim, 2 * dim, bias=False)

        # 如果传入整数int，则被看做只有一个整数的list，
        # 此时LayerNorm会对输入的最后一维进行归一化，这个int值需要和输入的最后一维一样大。
        self.norm = norm_layer(4 * dim)

    def forward(self, x):
        """

        :param x: B, H*W, C
        :return:  B, 1/4 * H*W, 2C
        """
        H, W = self.input_resolution
        B, L, C = x.shape
        assert L == H * W, "input feature has wrong size"
        assert H % 2 == 0 and W % 2 == 0, f"x size ({H}*{W}) are not even."

        x = x.view(B, H, W, C)

        x0 = x[:, 0::2, 0::2, :]  # B H/2 W/2 C
        x1 = x[:, 1::2, 0::2, :]  # B H/2 W/2 C
        x2 = x[:, 0::2, 1::2, :]  # B H/2 W/2 C
        x3 = x[:, 1::2, 1::2, :]  # B H/2 W/2 C
        x = torch.cat([x0, x1, x2, x3], -1)  # B H/2 W/2 4*C
        # (3)
        x = x.view(B, -1, 4 * C)  # B H/2*W/2 4*C

        # (4)
        x = self.norm(x)
        x = self.reduction(x)  # [B, H/2*W/2, 2*C]

        return x

    def extra_repr(self) -> str:
        return f"input_resolution={self.input_resolution}, dim={self.dim}"


class PatchSeparatingV2(nn.Module):
    r"""Patch Separate Layer.

    Args:
        input_resolution (tuple[int]): Resolution of input feature.
        dim (int): Number of input channels.
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(self, input_resolution, dim, norm_layer=nn.LayerNorm):
        super().__init__()
        self.input_resolution = input_resolution
        self.dim = dim
        self.up = nn.Linear(dim, dim, bias=False)
        # self.up = nn.Linear(dim, 2 * dim, bias=False)
        self.norm = norm_layer(dim)

        self.proj = nn.ConvTranspose2d(
            dim, dim, kernel_size=3, stride=2, bias=False,
            output_padding=1, padding=3
        )
        self.Tconv = nn.ConvTranspose2d(
            dim, int(dim/4), kernel_size=2, stride=2, padding=0, bias=False
        )

    def forward(self, x):
        """
        :param x1: B, H*W, 2C
        :param x2: B, H*W, 2C
        :return:
        """

        H, W = self.input_resolution
        B, L, C = x.shape
        assert L == H * W, "input feature has wrong size"
        assert H % 2 == 0 and W % 2 == 0, f"x size ({H}*{W}) are not even."

        x = self.norm(x)
        x = x.view(B, H, W, -1)  # [B, H, W, 4C]
        x = x.transpose(1, 3)  # [B, 4C, H, W]

        x_2 = self.Tconv(x)  # [B, C, 2H, 2W]

        x_2 = x_2.transpose(1, 3)  # [B, 2H, 2W, C]

        # x_2 = x_2.view(B, 2*H * 2*W, int(C/4))
        x_2 = x_2.reshape(B, 2*H * 2*W, -1)

        return x_2

    def extra_repr(self) -> str:
        return f"input_resolution={self.input_resolution}, dim={self.dim}"

    def flops(self):
        H, W = self.input_resolution
        flops = H * W * self.dim
        flops += (H // 2) * (W // 2) * 4 * self.dim * 2 * self.dim
        return flops


class BasicLayer(nn.Module):
    """A basic Swin Transformer layer for one stage.

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.
    """

    def __init__(
        self,
        dim,
        input_resolution,
        depth,
        num_heads,
        window_size,
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop=0.0,
        attn_drop=0.0,
        drop_path=0.0,
        norm_layer=nn.LayerNorm,
        downsample=None,
        use_checkpoint=False,
    ):

        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.depth = depth
        self.use_checkpoint = use_checkpoint

        # build blocks
        self.blocks = nn.ModuleList(
            [
                SwinTransformerBlock(
                    dim=dim,
                    input_resolution=input_resolution,
                    num_heads=num_heads,
                    window_size=window_size,
                    shift_size=0 if (i % 2 == 0) else window_size // 2,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    qk_scale=qk_scale,
                    drop=drop,
                    attn_drop=attn_drop,
                    drop_path=drop_path[i]
                    if isinstance(drop_path, list)
                    else drop_path,
                    norm_layer=norm_layer,
                )
                for i in range(depth)
            ]
        )

        # patch merging layer
        if downsample is not None:
            self.downsample = downsample(
                input_resolution, dim=dim, norm_layer=norm_layer
            )
        else:
            self.downsample = None

    def forward(self, x):

        for blk in self.blocks:
            if self.use_checkpoint:
                x = checkpoint.checkpoint(blk, x)
            else:
                x = blk(x)
        if self.downsample is not None:
            x = self.downsample(x)
        return x

    def extra_repr(self) -> str:
        return f"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}"


# Patch Partition + Linear Embedding
class PatchEmbed(nn.Module):
    def __init__(
        self, img_size=224, patch_size=4, in_chans=3, embed_dim=96, norm_layer=None
    ):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        patches_resolution = [
            img_size[0] // patch_size[0],
            img_size[1] // patch_size[1],
        ]
        self.img_size = img_size
        self.patch_size = patch_size
        self.patches_resolution = patches_resolution
        self.num_patches = patches_resolution[0] * patches_resolution[1]

        self.in_chans = in_chans  # define in_chans == 3
        self.embed_dim = embed_dim  # Swin-B.embed_dim ==128,(T is 96)

        self.proj = nn.Conv2d(
            in_chans, embed_dim, kernel_size=patch_size, stride=patch_size
        )  # dim 3->128

        if norm_layer is not None:
            self.norm = norm_layer(embed_dim)
        else:
            self.norm = None

    def forward(self, x):
        B, C, H, W = x.shape
        assert (
            H == self.img_size[0] and W == self.img_size[1]
        ), f"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]})."

        x = self.proj(x).flatten(2).transpose(1, 2)
        # B Ph*Pw C

        if self.norm is not None:
            x = self.norm(x)
        return x


class RPatchEmbed(nn.Module):
    def __init__(
        self, img_size=384, patch_size=4, in_chans=3, embed_dim=96, norm_layer=None
    ):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        patches_resolution = [
            img_size[0] // patch_size[0],  # 384/4=96
            img_size[1] // patch_size[1],
        ]
        self.img_size = img_size
        self.patch_size = patch_size
        self.patches_resolution = patches_resolution  # [96, 96]
        self.num_patches = patches_resolution[0] * patches_resolution[1]

        self.in_chans = in_chans  # define in_chans == 3
        self.embed_dim = embed_dim  # Swin-B.embed_dim ==128,(T is 96)

        self.reduction = nn.Linear(2 * embed_dim, embed_dim, bias=False)

        # self.proj = nn.Conv2d(
        #     in_chans, embed_dim, kernel_size=patch_size, stride=patch_size
        # )  # dim 3->128
        # 对偶
        self.proj = nn.ConvTranspose2d(
            2 * embed_dim, 1, kernel_size=patch_size, stride=patch_size, bias=False
        )

        if norm_layer is not None:
            self.norm = norm_layer(2 * embed_dim)
        else:
            self.norm = None

    def forward(self, x, r):
        # x: torch.Size([1, 9216, 256])
        # r:torch.Size([1, 9216, 128])
        # print(f"x:{x.shape}, r:{r.shape}")

        x = self.reduction(x)

        x = torch.cat((x, r), dim=-1)

        B, L, C = x.shape

        if self.norm is not None:
            x = self.norm(x)

        # 变形
        x = (
            x.view(B, int(np.sqrt(L)), int(np.sqrt(L)), -1)  # [B, H, W, C]
            .permute(0, 3, 1, 2)
            .contiguous()
        )  # [B, C, H, W]
        # print(f"===PD=== x:{x.shape}")  # torch.Size([1, 256, 96, 96])

        x = self.proj(x)  # [B, 3, 4H, 4W]
        # print(f"===PD=== x:{x.shape}")

        return x


class Up(nn.Module):
    def __init__(self, img_size=384, in_chans=64, out_chans=1, norm_layer=None):
        super().__init__()
        img_size = to_2tuple(img_size)
        self.img_size = img_size

        self.in_chans = in_chans  # define in_chans == 3
        self.out_chans = out_chans

        self.proj = nn.Sequential(
            nn.ConvTranspose2d(
                self.in_chans, self.out_chans, kernel_size=2, stride=2, bias=False
            ),
            nn.BatchNorm2d(self.out_chans),
            nn.ReLU(inplace=True),  # df_relu
        )
        # self.proj = nn.UpsamplingBilinear2d(scale_factor=2)  # df_Upsampl

        if norm_layer is not None:
            self.norm = norm_layer(self.in_chans)
        else:
            self.norm = None

    def forward(self, x):
        B, L, C = x.shape

        if self.norm is not None:
            x = self.norm(x)

        # 变形
        x = (
            x.view(B, int(np.sqrt(L)), int(np.sqrt(L)), -1)  # [B, H, W, C]
            .permute(0, 3, 1, 2)
            .contiguous()
        )  # [B, C, H, W]
        # print(f"===PD=== x:{x.shape}")  # torch.Size([1, 64, 192, 192])

        x = self.proj(x)  # [B, 3, H, W]
        # print(f"===PD=== x:{x.shape}")

        return x


class DirectField(nn.Module):
    def __init__(self, in_channels, shift_n=5, n_class=1):
        super(DirectField, self).__init__()

        self.shift_n = shift_n
        self.n_class = n_class

        self.fuse_conv = nn.Sequential(
            nn.Conv2d(in_channels * 2, in_channels, kernel_size=1, padding=0),
            nn.BatchNorm2d(in_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels, self.n_class, 1),
            nn.BatchNorm2d(self.n_class),
            nn.ReLU(inplace=True),
        )

    def forward(self, x, df):
        N, _, H, W = df.shape
        mag = torch.sqrt(torch.sum(df**2, dim=1))
        greater_mask = mag > 0.5
        greater_mask = torch.stack([greater_mask, greater_mask], dim=1)
        df[~greater_mask] = 0

        scale = 1.0

        grid = torch.stack(torch.meshgrid(torch.arange(H), torch.arange(W)), dim=0)
        grid = (
            grid.expand(N, -1, -1, -1).to(x.device, dtype=torch.float).requires_grad_()
        )
        grid = grid + scale * df

        grid = grid.permute(0, 2, 3, 1).transpose(1, 2)
        grid_ = grid + 0.0
        grid[..., 0] = 2 * grid_[..., 0] / (H - 1) - 1
        grid[..., 1] = 2 * grid_[..., 1] / (W - 1) - 1

        select_x = x.clone().transpose(2, 3)
        for i in range(self.shift_n):
            # 处理
            select_x = F.grid_sample(
                select_x,
                grid,
                mode="bilinear",
                padding_mode="border",
                align_corners=True,
            )

        select_x = select_x.transpose(2, 3)
        out = self.fuse_conv(torch.cat([x, select_x], dim=1))

        return out


# 解码器
class RSwinTransformer(nn.Module):
    def __init__(
        self,
        img_size=384,
        patch_size=4,
        in_chans=3,
        num_classes=1000,
        embed_dim=1024,  # 128
        depths=[2, 6, 2, 2],  # [2, 2, 6, 2],
        num_heads=[24, 12, 6, 3],  # [3, 6, 12, 24],
        window_size=12,
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1,
        norm_layer=nn.LayerNorm,
        ape=False,
        patch_norm=True,
        use_checkpoint=False,
        **kwargs,
    ):
        super().__init__()

        self.num_classes = num_classes
        self.num_layers = len(depths)
        self.embed_dim = embed_dim
        self.ape = ape
        self.patch_norm = patch_norm
        # self.num_features = int(embed_dim * 0.25 ** (self.num_layers - 1))
        self.mlp_ratio = mlp_ratio

        self.Rpatch_embed = RPatchEmbed(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=in_chans,
            embed_dim=128,
            norm_layer=norm_layer if self.patch_norm else None,
        )
        patches_resolution = [12, 12]
        num_patches = patches_resolution[0] * patches_resolution[1]

        if self.ape:
            self.absolute_pos_embed = nn.Parameter(
                torch.zeros(1, num_patches, embed_dim)
            )
            trunc_normal_(self.absolute_pos_embed, std=0.02)

        self.pos_drop = nn.Dropout(p=drop_rate)

        self.Up = Up(out_chans=64)  # x2

        # ------ Direct Field
        self.ConvDf_1x1 = nn.Conv2d(64, 2, kernel_size=1, stride=1, padding=0)
        self.DF = DirectField(64)

        self.Conv_1x1 = nn.Sequential(
            nn.Conv2d(64, 1, kernel_size=1, stride=1, padding=0),
            nn.BatchNorm2d(1),
            nn.ReLU(inplace=True),
        )

        # ----------
        dpr = [
            x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))
        ]  # stochastic depth decay rule

        # ================= build layers =================
        self.layers = nn.ModuleList()
        for i_layer in range(self.num_layers):  # 4
            layer = BasicLayer(
                dim=int(embed_dim * 0.5**i_layer),  # ================= 【修改】
                input_resolution=(
                    patches_resolution[0] * (2**i_layer),
                    patches_resolution[1] * (2**i_layer),
                ),
                depth=depths[i_layer],
                num_heads=num_heads[i_layer],
                window_size=window_size,
                mlp_ratio=self.mlp_ratio,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                drop=drop_rate,
                attn_drop=attn_drop_rate,
                drop_path=dpr[sum(depths[:i_layer]) : sum(depths[: i_layer + 1])],
                norm_layer=norm_layer,
                # downsample=PatchSeparating if (i_layer < self.num_layers - 1) else None,
                # downsample=PatchSeparating,
                downsample=PatchSeparatingV2,
                use_checkpoint=use_checkpoint,
            )
            # self.layers 中应该是 4 个
            self.layers.append(layer)

        # self.norm = norm_layer(self.num_features)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            # nn.init.xavier_uniform_(m.weight)
            if m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.ConvTranspose2d):
            nn.init.xavier_uniform_(m.weight),
            if m.bias is not None:
                nn.init.constant_(m.bias, 0)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {"absolute_pos_embed"}

    @torch.jit.ignore
    def no_weight_decay_keywords(self):
        return {"relative_position_bias_table"}

    def forward(self, x, encoder_features):
        layer_features = []
        # (1) 过3个RSwinT
        for i, layer in enumerate(self.layers):
            r = encoder_features[3 - i]  # ====================== 【坑爹索引，后面完善】
            # print(f"{i}, x:{x.shape}, r:{r.shape}")
            x = torch.cat((x, r), dim=-1)
            x = layer(x).cuda()

            layer_features.append(x)

        # (2) PD
        x = self.Up(x)  # [B, 64, 384, 384], 上采样2倍

        layer_features.append(x)

        df = self.ConvDf_1x1(x)
        out = self.DF(x, df)

        return out, df


class SwinTransformer(nn.Module):
    def __init__(
        self,
        img_size=384,
        patch_size=4,
        in_chans=3,
        num_classes=1000,
        embed_dim=128,
        depths=[2, 2, 6, 2],
        num_heads=[3, 6, 12, 24],
        window_size=12,
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1,
        norm_layer=nn.LayerNorm,
        ape=False,
        patch_norm=True,
        use_checkpoint=False,
        **kwargs,
    ):
        super().__init__()

        self.num_classes = num_classes
        self.num_layers = len(depths)  # 4
        self.embed_dim = embed_dim
        self.ape = ape
        self.patch_norm = patch_norm
        self.num_features = int(embed_dim * 2 ** (self.num_layers - 1))
        self.mlp_ratio = mlp_ratio

        self.patch_embed = PatchEmbed(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=in_chans,
            embed_dim=embed_dim,
            norm_layer=norm_layer if self.patch_norm else None,
        )
        num_patches = self.patch_embed.num_patches
        patches_resolution = self.patch_embed.patches_resolution
        self.patches_resolution = patches_resolution

        if self.ape:
            self.absolute_pos_embed = nn.Parameter(
                torch.zeros(1, num_patches, embed_dim)  # num_patches=4, embed_dim=128
            )
            trunc_normal_(self.absolute_pos_embed, std=0.02)

        self.pos_drop = nn.Dropout(p=drop_rate)

        dpr = [
            x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))
        ]  # stochastic depth decay rule

        # ================= build layers =================
        self.layers = nn.ModuleList()
        for i_layer in range(self.num_layers):
            layer = BasicLayer(
                dim=int(embed_dim * 2**i_layer),  # embed_dim=128
                input_resolution=(
                    patches_resolution[0] // (2**i_layer),
                    patches_resolution[1] // (2**i_layer),
                ),
                depth=depths[i_layer],
                num_heads=num_heads[i_layer],
                window_size=window_size,
                mlp_ratio=self.mlp_ratio,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                drop=drop_rate,
                attn_drop=attn_drop_rate,
                drop_path=dpr[sum(depths[:i_layer]) : sum(depths[: i_layer + 1])],
                norm_layer=norm_layer,
                downsample=PatchMerging if (i_layer < self.num_layers - 1) else None,
                use_checkpoint=use_checkpoint,
            )
            # self.layers 中应该是 4 个
            self.layers.append(layer)

        self.norm = norm_layer(self.num_features)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {"absolute_pos_embed"}

    @torch.jit.ignore
    def no_weight_decay_keywords(self):
        return {"relative_position_bias_table"}

    def forward_features(self, x):
        # x: torch.Size([1, 3, 384, 384])
        layer_features = []
        x = self.patch_embed(x)  # torch.Size([1, 9216, 128])

        layer_features.append(x)
        # B, L, C = x.shape
        # layer_features.append(
        #     x.view(B, int(np.sqrt(L)), int(np.sqrt(L)), -1)
        #     .permute(0, 3, 1, 2)
        #     .contiguous()
        # )

        if self.ape:
            x = x + self.absolute_pos_embed
        x = self.pos_drop(x)

        # ==============
        for layer in self.layers:
            x = layer(x)

            layer_features.append(x)
            # B, L, C = x.shape
            # # print('x:', x.shape)
            # xl = (
            #     x.view(B, int(np.sqrt(L)), int(np.sqrt(L)), -1)
            #     .permute(0, 3, 1, 2)  # 将tensor的维度换位
            #     .contiguous()  # 如果在view之前用了transpose, permute等，需要用contiguous()来返回一个contiguous copy。
            # )
            # # print('xl',xl.shape)
            # layer_features.append(xl)

        x = self.norm(x)  # B L C

        layer_features[-1] = x
        # B, L, C = x.shape
        # # x = self.avgpool(x.ranspose(1, 2))  # B C 1
        # x = (
        #     x.view(B, int(np.sqrt(L)), int(np.sqrt(L)), -1)
        #     .permute(0, 3, 1, 2)
        #     .contiguous()
        # )
        # # x = torch.flatten(x, 1)
        # layer_features[-1] = x

        return layer_features

    def forward(self, x):
        outs = self.forward_features(x)

        return outs


class PRLNet(nn.Module):
    def __init__(self, norm_layer=nn.LayerNorm):
        super(PRLNet, self).__init__()

        # base
        embed_dim = 128
        num_heads = [4, 8, 16, 32]

        # large
        # embed_dim = 192
        # num_heads = [6, 12, 24, 48]

        self.rgb_swin = SwinTransformer(
            embed_dim=embed_dim, depths=[2, 2, 18, 2], num_heads=num_heads
        )
        self.th_swin = SwinTransformer(
            embed_dim=embed_dim, depths=[2, 2, 18, 2], num_heads=num_heads
        )

        # Edge
        self.edge_layer = Edge_Module(in_fea=[embed_dim, embed_dim * 2, embed_dim * 4])

        # self.edge_feature = conv3x3_bn_relu(1, 32)
        self.up_edge = nn.Sequential(
            nn.UpsamplingBilinear2d(scale_factor=4),
            # conv3x3(32, 1),
        )
        self.tanh = nn.Tanh()

        # 解码器
        self.decoder = RSwinTransformer(
            embed_dim=1024 * 2, depths=[2, 18, 2, 2], num_heads=[32, 16, 8, 4]
        )

        self.relu = nn.ReLU(True)

    def forward(self, x, t):
        """
        :param x: torch.Size([1, 3, 384, 384])
        :param t: torch.Size([1, 3, 384, 384])
        :return:
        """
        # ===== RGB and T Encoder
        rgb_list = self.rgb_swin(x)
        th_list = self.th_swin(t)

        r4 = rgb_list[0]  # torch.Size([1, 9216, 128]), 96*96
        r3 = rgb_list[1]  # torch.Size([1, 2304, 256]), 48*48
        r2 = rgb_list[2]  # torch.Size([1, 576, 512]), 24*24
        r1 = rgb_list[3]  # torch.Size([1, 144, 1024]), 12*12

        t4 = th_list[0]  # torch.Size([1, 9216, 128]), 96
        t3 = th_list[1]  # torch.Size([1, 2304, 256]), 48
        t2 = th_list[2]  # torch.Size([1, 576, 512]), 24
        t1 = th_list[3]  # torch.Size([1, 144, 1024]), 12

        f_list = list()
        f_list.append((r4 + t4).flatten(2))
        f_list.append((r3 + t3).flatten(2))
        f_list.append((r2 + t2).flatten(2))
        f_list.append((r1 + t1).flatten(2))

        # ===== Decoder
        out, df = self.decoder(r1 + t1, f_list)  # V4

        # ===== Edge
        sdm = self.edge_layer(t4, t3, t2)  # 输出：[B, H/4, W/4, 1]

        return out, df, sdm  # V4

    def load_pre(self, pre_model):
        self.rgb_swin.load_state_dict(torch.load(pre_model)["model"], strict=False)
        print(f"RGB SwinTransformer loading pre_model ${pre_model}")
        self.th_swin.load_state_dict(torch.load(pre_model)["model"], strict=False)
        print(f"Thermal SwinTransformer loading pre_model ${pre_model}")


def toHW(x):
    B, L, C = x.shape
    # print('x:', x.shape)
    x = x.view(B, int(np.sqrt(L)), int(np.sqrt(L)), -1).permute(0, 3, 1, 2).contiguous()
    return x


class CALayer(nn.Module):
    def __init__(self, channel, reduction=16):
        super(CALayer, self).__init__()
        # global average pooling: feature --> point
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        # feature channel downscale and upscale --> channel weight
        self.conv_du = nn.Sequential(
            nn.Conv2d(channel, channel // reduction, 1, padding=0, bias=True),
            nn.ReLU(inplace=True),
            nn.Conv2d(channel // reduction, channel, 1, padding=0, bias=True),
            nn.Sigmoid(),
        )

    def forward(self, x):
        y = self.avg_pool(x)
        y = self.conv_du(y)
        return x * y


class Edge_Module(nn.Module):
    def __init__(self, in_fea=[128, 256, 512], mid_fea=32):
        super(Edge_Module, self).__init__()
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = nn.Sequential(
            nn.Conv2d(in_fea[0], mid_fea, 1),
            nn.ReLU(inplace=True),)
        self.conv2 = nn.Sequential(
            nn.Conv2d(in_fea[1], mid_fea, 1),
            nn.ReLU(inplace=True),)
        self.conv3 = nn.Sequential(
            nn.Conv2d(in_fea[2], mid_fea, 1),
            nn.ReLU(inplace=True),)

        self.up2 = nn.UpsamplingBilinear2d(scale_factor=2)
        # self.classifer = nn.Conv2d(mid_fea * 3, 1, kernel_size=3, padding=1)

        self.classifer = nn.Sequential(
            nn.Conv2d(mid_fea * 3, 1, kernel_size=3, padding=1),
            nn.UpsamplingBilinear2d(scale_factor=4),
            nn.Tanh()
        )

    def forward(self, x1, x2, x3):
        x1, x2, x3 = toHW(x1), toHW(x2), toHW(x3)

        _, _, h, w = x1.size()
        edge1 = self.conv1(x1)
        edge2 = self.conv2(x2)
        edge3 = self.conv3(x3)

        edge2 = F.interpolate(edge2, size=(h, w), mode="bilinear", align_corners=True)
        edge3 = F.interpolate(edge3, size=(h, w), mode="bilinear", align_corners=True)

        edge = torch.cat([edge1, edge2, edge3], dim=1)
        edge = self.classifer(edge)

        return edge


if __name__ == "__main__":
    pre_path = r"/home/shared/swinT_ckpt/swin_base_patch4_window12_384_22k.pth"
    a = np.random.random((2, 3, 384, 384))
    b = np.random.random((2, 3, 384, 384))
    c = torch.Tensor(a).cuda()
    d = torch.Tensor(b).cuda()

    model = PRLNet().cuda()
    model.load_pre(pre_path)
    out, df, sdm = model(c, d)

    print(f"==========out: {out.shape}=========")
    print(f"==========df: {df.shape}=========")
    print(f"==========sdm: {sdm.shape}=========")

    print("===========end===========")


